Docker 101

# Objective

This learning lab introduces Docker, a common set of tools for
building, sharing and deploying __containers__. A __container__ is a
set of system services that runs an application and its dependencies
in processes whose resources are isolated from the rest of the host
system. For more information about containers, see the Containers-101
lab. You can then can put your new knowledge into practice using this
learning lab to build, deploy and optionally share your first Docker
container.

Completion time: 20 minutes

# Audience

* DevOps engineers
* Application developers
* IT teams addressing developer needs for Docker and Containers

# Content Notice

Thanks to the Cisco Live EU 2017 workshop "Introduction to Containers"
for portions of this learning lab. Further reading is available in the
excellent docker introduction at
[imapex.io](https://github.com/imapex-training/mod_adv_docker/blob/master/README.md)

# Recap

The Container-101 learning lab explained that the technology on which
containers are built is only part of the story. Containers are popular
because the tools and workflows that htey offer make it easy for
developers to build, package, share, and deploy applications. Docker
is not the only set of tools designed to support containers but it is
the most popular.

## Containers ARE
* A way to package applications and dependencies.
* A way to guarantee portability and consistency of execution.
* A way to keep an application isolated.
* A way to take advantage of the isolation offered by a VM without the overhead.

## Containers ARE NOT

    1. Microservices  
    Containers are often confused with
    __microservices__. Microservices, which are lightweight system
    services, can benefit from lightweight methods of packaging,
    distributing and deploying software, but they are not the same
    thing as containers. Any application can be packaged using
    containers; it doesn't have to be a microservice. Even a
    badly-written legacy application can be packaged in a container;
    using a container doesn't magically improve the application.

    2. Virtual Machines  
    Containers are not VMs. Containers run entirely in user space. If
    an application requires kernel extensions, kernel modules, or a
    custom kernel then a container is probably not the right solution
    for it.

    3. Magic  
    A container is a tool like other tools. It has its own limitations
    and nuances and its own deployment considerations, just like any
    other tool.

# Installing Docker

The docker engine (run's and manages the containers on a host) and the
docker client tools (allows you to interact with the engine, build,
run and share docker images) are now in the default package management
on many linux distributions.

You can also download direct for Linux, Mac and Windows from
[Docker.com](http://www.docker.com) if you are having issues..


However, for these hands on sessions. we'll use an in-browser docker
playground called play-with-docker.com

This gives you access to a full VM running Docker, direct from your
web browser, making demo's really easy regardless of your device!

Open [http://play-with-docker.com]() in your browser and click "Add
New Instance" on the right. You'll then be given a full terminal
window to the instance which we'll use for the rest of this learning
lab!

![Play With Docker
 Site](/posts/files/docker-101/assets/images/playwithdocker1.png)

On this VM, docker has already been installed. You can test this now
by asking the docker CLI for it's version number..

```
docker -v
```

Output will look something like this:

```
Docker version 1.13.1-rc1, build 2527cfc
```

# Running our first Docker container

The simplest way to use docker is to run an existing 'public image'
someone else has already created and shared on the public Docker Hub.

The docker CLI searches docker hub by default (other private docker
repositories are available and can be configured for the docker CLI to
use those instead).

xSearch for a public docker container image by running `docker search
<keyword>`

xTheres a very simple test container called hello-world... Guess what
it does.

![docker search
 hello-world](/posts/files/docker-101/assets/images/dockersearch.png)

We can see docker has searched the public docker hub repositories and
found the hello-world image. So lets run it...

```
docker run hello-world
```

When we specify an image name (hello-world in this case), docker looks
to see if we have a copy of that container image locally, if we don't,
it downloads it from the public docker hub.

Once downloaded, docker will set up the needed container isolation on
the system and run this container image.

This container simply outputs a hello message to the console and then
dies... You should see this happening on your play-with-docker system:

![docker run
 hello-world](/posts/files/docker-101/assets/images/dockerrun1.png)

Congratulations! You just ran your first container with Docker!

Read on to find out what just happened behind the scenes, and how we
make our own Docker images to containerise our own applications!

